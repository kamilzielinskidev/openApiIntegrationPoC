/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/netherlands/supermarkt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get supermarket details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            heading?: {
                                0?: components["schemas"]["Heading"];
                            };
                            storeLocator?: {
                                0?: components["schemas"]["StoreLocator"];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Heading: {
            /** @description Template identifier for the heading component */
            "mgnl:template"?: string;
            headline?: {
                props?: {
                    /** @description The text of the headline */
                    text: string;
                    /** @description Whether the text should be in uppercase */
                    uppercase: boolean;
                    /** @description Additional styling for the headline */
                    styling: string;
                    /** @description The variant of the headline (e.g., h1, h2, etc.) */
                    variant: string;
                    /** @description Whether the headline should be underlined */
                    underline: boolean;
                };
            };
        };
        StoreLocator: {
            /** @description Placeholder text for the search input */
            searchPlaceholder?: string;
            /** @description Label for the cookie consent button */
            cookieLabel?: string;
            /** @description Text for the cookie consent button */
            cookieBtnLabel?: string;
            /** @description Text for the data protection button */
            dataProtectionBtnLabel?: string;
            /** @description Description shown when no search results are found */
            noSearchResultDescription?: string;
            /** @description Label for the opening status of a store */
            statusOpensLabel?: string;
            /** @description Label for when a store is closed */
            statusClosedLabel?: string;
            /** @description Label for the route to the store */
            routeLabel?: string;
            /** @description Label for the map tab */
            tabMapLabel?: string;
            /** @description Label shown when no search results are found */
            noSearchResultLabel?: string;
            /** @description Label for found stores in search results */
            searchResultLabel?: string;
            /** @description Suffix for open status with time placeholder */
            statusOpenSuffix?: string;
            /** @description Label for stores that are open until a certain time */
            statusOpenLabel?: string;
            /** @description Label for filtering options in the store locator */
            filterLabel?: string;
            /** @description Label for the list tab in the store locator */
            tabListLabel?: string;
            /** @description Suffix for the opening time of a store */
            statusOpensSuffix?: string;
            /** @description Label for more information about a store */
            detailLabel?: string;
            /** @description Label for the location of a store */
            locationLabel?: string;
            /** @description Label for the selected store in the locator */
            selectedLabel?: string;
            /** @description Template identifier for the store locator component */
            "mgnl:template"?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
